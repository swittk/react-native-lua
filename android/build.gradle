import java.nio.file.Paths

static def findNodeModules(baseDir) {
  def basePath = baseDir.toPath().normalize()
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
    def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
    if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
      return nodeModulesPath.toString()
    }
    basePath = basePath.getParent()
  }
  throw new GradleException("ReactNativeNativeVideo: Failed to find node_modules/ path!")
}

def nodeModules = findNodeModules(projectDir)
def reactProperties = new Properties()
file("$nodeModules/react-native/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }
def REACT_NATIVE_VERSION = reactProperties.getProperty("VERSION_NAME").split("\\.")[1].toInteger()

buildscript {
    if (project == rootProject) {
        repositories {
            google()
            mavenCentral()
            jcenter()
        }

        dependencies {
            classpath 'com.android.tools.build:gradle:4.2.0'
        }
    }
}

apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}
def getExtOrDefaultValue(name, defaultValue) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
}

android {
  configurations {
    extractHeaders
    extractJNI
  }
  compileSdkVersion safeExtGet('Lua_compileSdkVersion', 29)
    ndkVersion getExtOrDefaultValue('ndkVersion', '21.4.7075529')
    defaultConfig {
        minSdkVersion safeExtGet('Lua_minSdkVersion', 16)
        targetSdkVersion safeExtGet('Lua_targetSdkVersion', 29)
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all"
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
              arguments "-DNODE_MODULES_DIR=${nodeModules.toString()}",
                // This is how the REACT_NATIVE_VERSION magic variable appears in our CMAKELISTS file
                "-DREACT_NATIVE_VERSION=${REACT_NATIVE_VERSION}",
                // Needed to add this otherwise the fbjni header won't be found
                // https://github.com/facebookincubator/fbjni/issues/50#issuecomment-788869153
                 '-DANDROID_STL=c++_shared'
            }
        }

    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    lintOptions {
        disable 'GradleCompatible'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
  dependencies {
//    implementation 'com.facebook.fbjni:fbjni:+'
    // If headers are required.
    extractHeaders 'com.facebook.fbjni:fbjni:+:headers'
    // If the `.so` files are required for linking.
    extractJNI 'com.facebook.fbjni:fbjni:+'
  }
  // Doing this following https://github.com/facebookincubator/fbjni/issues/50#issuecomment-788869153
  // Final change that made this finally able to run on device (though still crashes due to sth else)
  packagingOptions {
    exclude("**/libfbjni.so")
    exclude("**/libc++_shared.so")
//    exclude 'lib/arm64-v8a/libfbjni.so'
  }
  configurations {
    all*.exclude module: 'fbjni-java-only'
  }
}

repositories {
    mavenLocal()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url("$rootDir/../node_modules/react-native/android")
    }
    maven {
      url("$rootDir/../node_modules/react-native")
    }
    google()
    mavenCentral()
    jcenter()
}

dependencies {
    //noinspection GradleDynamicVersion
  implementation("com.facebook.react:react-native:+") {
        exclude group: 'com.facebook.fbjni', module: 'fbjni-java-only'
}
//    implementation 'com.facebook.fbjni:fbjni:0.2.2'
}

task extractAARHeaders {
  doLast {
    configurations.extractHeaders.files.each {
      def file = it.absoluteFile
      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "**/*.h"
      }
    }
  }
}

task extractJNIFiles {
  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile
      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
    }
  }
}

tasks.whenTaskAdded { task ->
  if (task.name.contains('externalNativeBuild')) {
    task.dependsOn(extractAARHeaders)
    task.dependsOn(extractJNIFiles)
  }
}
